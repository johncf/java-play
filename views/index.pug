doctype html
html
  head
    title Java Playground
    style.
      html, body {
        height: 100%;
      }

      body {
        box-sizing: border-box;
        min-width: 720px;
        display: flex;
        flex-direction: column;
        padding: 0;
        margin: 0;
      }

      section#header {
        background-color: #ace;
        padding: 8px;
      }

      section#content {
        height: 100vh;
        overflow: hidden;
      }

      #left, #right {
        box-sizing: border-box;
        padding: 8px;
      }

      #left { padding-right: 0; }
      #right { padding-left: 0; }

      #editor, #output {
        box-sizing: border-box;
        border: 1px solid lightgray;
        height: 100%;
        margin: 0;
      }

      #output {
        width: 100%;
        padding: 8px;
      }

      .gutter {
        background-color: transparent;

        background-repeat: no-repeat;
        background-position: 50%;
      }

      .gutter.gutter-horizontal {
        cursor: col-resize;
      }

      .split, .gutter.gutter-horizontal {
        height: 100%;
        float: left;
      }

  body
    section#header
      button#compile Compile and Run
    section#content
      div#left.split
        pre#editor
      div#right.split
        pre#output.split Click "Compile and Run" when ready.
    script(src="/js/ace/ace.js")
    script.
      var editor = ace.edit("editor");
      editor.setTheme("ace/theme/tomorrow");
      editor.session.setMode("ace/mode/java");
      var showCode = "public class Test {\n}";
      if (typeof(Storage) === "undefined") {
        alert("The code you write will not be saved!");
      } else if (localStorage.javaSource) {
        showCode = localStorage.javaSource;
      } else {
        localStorage.javaSource = showCode;
      }
      editor.setValue(showCode, 1);

      var ws = new WebSocket("ws://" + window.location.hostname + ":8081");
      var out = document.getElementById("output");

      ws.onmessage = function(e) {
        var msg = JSON.parse(e.data);
        if (msg.status == 'queued') {
          out.innerText = "Queued...\n";
        } else if (msg.status == 'started') {
          out.innerText += "Compiling...\n";
        } else if (msg.status == 'compiled') {
          if (msg.ecode == 0) {
            out.innerText += "Compiled without errors";
            if (msg.log) {
              out.innerText += ", with logs:\n";
              out.innerText += msg.log;
            } else {
              out.innerText += ".\n";
            }
            if (!msg.done) {
              out.innerText += "Executing...\n";
            }
          } else {
            out.innerText += "Compiler exited with code " + msg.ecode + ".\n";
            out.innerText += msg.log;
          }
        } else if (msg.status == 'executed') {
          out.innerText += "Program exited with code " + msg.ecode + ", with output:\n";
          out.innerText += msg.out + msg.err;
        } else if (msg.status == 'error') {
          out.innerText += "A fatal error occurred. Reason: " + msg.cause + "\n";
        } else {
          out.innerText += "Unrecognized response from server.\n";
          console.log(msg);
        }
      }
      document.getElementById("compile").onclick = function() {
        out.innerText = "";
        ws.send(JSON.stringify({ "source": editor.getValue() }));
      }
      window.onbeforeunload = function(e) {
        if (typeof(Storage) !== "undefined") {
          localStorage.javaSource = editor.getValue();
        }
      }
    script(src="/js/split.min.js")
    script.
      Split(['#left', '#right'], {
        gutterSize: 8,
        cursor: 'col-resize'
      })
